---
format:
  revealjs:
    css: custom.css
    transition: none
---

## ECON 0150 | Economic Data Analysis {.center}
<p class="subheader-center">The economist's data analysis pipeline.</p>

<br> 

### *Part 2.2 | Transforming Data*

---

## Coffee Prices
<p class="subheader">Do you notice a **trend** in price?</p>

![](i/i_cpi_01.png)

---

## Coffee Prices
<p class="subheader">Do you notice a **trend** in price?</p>

![](i/i_cpi_01.png)

*> was coffee about as expensive in 1980 as it is today?*

---

## Coffee Prices: Nominal vs Real Prices
<p class="subheader">Do you notice a **trend** in price?</p>

![](i/i_cpi_02.png)

*> no! a dollar today is worth much less than in 1980!*

. . .

*> adjusting for inflation makes the picture clearer*

---

## Real Coffee Prices: Adjust For Inflation
<p class="subheader">Do you notice a **trend** in price?</p>

![](i/i_cpi_03.png)

. . .

*> prices have dropped a lot since 1970 and have been stable since 2000*

---

## Exercise 2.2 | Real Price Adjustment
<p class="subheader">Is there a trend in the real price of coffee?</p>

<br><br>

Lets transform coffee prices from nominal dollars to real dollars.

- **Data:** `Coffee_Prices_CPI.csv`

---

## Starbucks' Global Server Capacity
<p class="subheader">How many shops are opening at any given time?</p>

<br><br>

- Starbucks manages many shops globally and needs to maintain server capacity for all of them around the clock.

. . .

- Starbucks has a massive operation to make sure their shops are able to open every morning. 

. . .

- Lets investigate how many coffee shops are opening at any hour of the day.

---

## Opening Times: Starbucks' Global Capacity
<p class="subheader">How many shops are opening at any given time?</p>

Looking at the data is a good place to start.

<br>

```{python}
# Import packages
import pandas as pd

# Load data
hours = pd.read_csv('data/Starbucks_Location_Hours.csv')
hours[['country', 'open', 'close', 'GMT']].head()
```

. . .

<br>

*>as is common, it's difficult to understand the raw data on its own*

---

## Opening Times
<p class="subheader">What times do shops open in their local times?</p>

Lets start by looking at what times shops open in local time.

![](i/i_01.png)

. . .

*> but does this tell us how many shops are opening at one time?*

---

## Opening Times: Standardize by GMT
<p class="subheader">What times do shops open in GMT?</p>

Lets standardize all times in *Greenwich Mean Time* (GMT).

. . .

![](i/i_02.png)

. . .

*> what do the negative values mean?*

. . .

*> hour -1 (1 hour before GMT midnight) is the same as opening at hour 23*

---

## Opening Times: Normalize to 24 Hours
<p class="subheader">Normalize the negative values to 24 hours.</p>

Lets add 24 if the number is negative.

. . .

![](i/i_03.png)

---

## Opening Times: Standardizing Hours
<p class="subheader">How many shops are opening at any given time?</p>

![](i/i_03.png)

. . .

*> a small bump during morning in Europe*

. . .

*> a huge spike during morning in the Americas*

. . .

*> a smaller spike during morning in Asia*

---

## Exercise 2.2 | Starbucks' Global Capacity
<p class="subheader">How many shops are open at any given time?</p>

<br><br>

- Starbucks manages many shops globally and needs to maintain server capacity for all of them around the clock.

. . .

- We want to investigate how many coffee shops are open at any given hour to better understand server loads and Starbucks' global capacity needs.

. . .

- It's also just pretty interesting.

---

## Exercise 2.2 | Starbucks' Global Capacity
<p class="subheader">How many shops are opening at any given time?</p>

Looking at the data is a good place to start.

<br>

```{python}
# Import packages
import pandas as pd

# Load data
hours = pd.read_csv('data/Starbucks_Location_Hours.csv')
hours[['country', 'open', 'close', 'GMT']].head()
```

. . .

<br>

*>as is common, it's difficult to understand the raw data on its own*

---

## Opening Times
<p class="subheader">What times do shops open in their local times?</p>

Lets start by looking at what times shops open in local time.

. . .

```{.python}
# Histogram of opening times
sns.histplot(hours, x='open')
```

. . .

![](i/i_01.png)

---

## Opening Times: Standardize by GMT
<p class="subheader">What times do shops open (GMT)?</p>

Lets standardize all times in *Greenwich Mean Time* (GMT).

. . .

```{.python}
# Normalize to GMT
hours['OpenGMT'] = hours['open'] - hours['GMT']

# Histogram of opening times (GMT)
sns.histplot(hours, x='OpenGMT')
```

. . .

![](i/i_02.png)

---

## Opening Times: Standardizing Hours
<p class="subheader">Normalize the negative values to 24 hours.</p>

Lets add 24 if the number is negative.

. . .

```{.python}
# Normalize to 24 hours
hours['OpenGMT24'] = hours['OpenGMT'].mod(24)

# Histogram of opening times (GMT, 24)
sns.histplot(hours, x='OpenGMT24')
```

. . .

![](i/i_03.png)

---

## Scatterplot: Linear Scale
<p class="subheader">Q. Is there a relationship between GDP and coffee production?</p>

![](i/c_04.png)

. . .

*> a scatterplot effectively visualizes scross sectional data with two dimensions*

---

## Scatterplot: Linear Scale
<p class="subheader">Which countries produce less coffee per dollar than Brazil?</p>

![](i/c_05.png)

*> separating lines can help make comparisons between ratios*

---

## Scatterplot: Linear Scale
<p class="subheader">Which countries produce less coffee per dollar than Brazil?</p>

![](i/c_06.png)

*> separating lines can help make comparisons between ratios*

---

## Scatterplot: Linear Scale
<p class="subheader">Which countries produce more coffee per dollar than Brazil?</p>

![](i/c_07.png)

*> separating lines can help make comparisons between ratios*

---

## Scatterplot: Linear Scale
<p class="subheader">How does GDP relate to coffee production?</p>

![](i/c_09.png)

. . .

*> small values are bunched; large data is very separated*

---

## Scatterplot: Log Scale
<p class="subheader">How does GDP relate to coffee production?</p>

![](i/c_10.png)

*> we can fix this by applying a log transformation*

---

## Scatterplot: Log Scale
<p class="subheader">How does GDP relate to coffee production?</p>

![](i/c_10.png)

*> looks positive, but we'll formally test this in Part 4*

---

## Exercise 2.2 | Log Transformation
<p class="subheader">How does GDP relate to coffee production?</p>

```{python}
file_path = 'https://tayweid.github.io/econ-0150/parts/part-1-5/data/'
gdp = pd.read_csv(file_path + 'Beans_GDP_2019.csv', index_col=0)
gdp.head()
```

---

## Exercise 2.2 | Log Transformation
<p class="subheader">How does GDP relate to coffee production?</p>

```{.python}
# Log both x and y variables
gdp['log_GDP'] = np.log(gdp['GDP'])
gdp['log_prod'] = np.log(gdp['coffee_prod'])
```

. . .

```{.python}
# Plot the log variables
sns.scatterplot(gdp, y='log_prod', x='log_GDP')
```

. . .

![](i/c_10.png)

---

## Exercise 2.2 | Log Transformation
<p class="subheader">How does GDP relate to coffee production?</p>

```{.python}
# Use a log scale without transforming the variable
sns.scatterplot(gdp, y='coffee_prod', x='GDP')
plt.xscale('log')
plt.yscale('log')
```

---

## Scatterplot: Log Scale
<p class="subheader">How does GDP relate to coffee production in the Americas?</p>

![](i/c_10.png)

. . .

*> lets use a filter with this data*

---

## Filtering Data: next time!
<p class="subheader">How does GDP relate to coffee production in the Americas?</p>

![](i/c_11.png)

. . .

*>*