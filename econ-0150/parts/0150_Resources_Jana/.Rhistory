#keep only the variables _BMI5, SEX, AGE, INCOME2, EDUCA, MARITAL, MENTHLTh
BRFSS <- BRFSS %>%
select(`_BMI5`, SEX, AGE, INCOME2, EDUCA, MARITAL, MENTHLTH, `_CNTY`, `_STATE`)
#generate a variable GEOID equal `_STATE` + `_CNTY`
BRFSS <- BRFSS %>%
mutate(GEOID = paste0(sprintf("%02d", `_STATE`), sprintf("%03d", `_CNTY`))) %>%
select(-`_STATE`, -`_CNTY`)
# Merge BRFSS with county unemployment data using GEOID, only keep matched observations
BRFSS <- merge(BRFSS, county_unemp, by = "GEOID", all.x = FALSE)
#replace the value 88 of MENTHLTH by 0
BRFSS$MENTHLTH[BRFSS$MENTHLTH == 88] <- 0
#replace the value 99 and 77 of MENTHLTH by NA
BRFSS$MENTHLTH[BRFSS$MENTHLTH == 99 | BRFSS$MENTHLTH == 77] <- NA
#replace the value 99 and 77 of INCOME2 by NA
BRFSS$INCOME2[BRFSS$INCOME2 == 99 | BRFSS$INCOME2 == 77] <- NA
#replace the value 99 of AGE by NA
BRFSS$AGE[BRFSS$AGE == 99] <- NA
#generate a dummy variable equal 1 if EDUCA is 5 or 6
BRFSS <- BRFSS %>%
mutate(College = ifelse(EDUCA %in% c(5, 6), 1, 0))
#drop EDUCA
BRFSS <- BRFSS %>%
select(-EDUCA)
#generate a dummy variable equal 1 if MARITAL is 1
BRFSS <- BRFSS %>%
mutate(Married = ifelse(MARITAL == 1, 1, 0))
#drop MARITAL
BRFSS <- BRFSS %>%
select(-MARITAL)
#generate a dummy variable equal 1 if SEX is 2
BRFSS <- BRFSS %>%
mutate(Female = ifelse(SEX == 2, 1, 0))
#drop MARITAL
BRFSS <- BRFSS %>%
select(-SEX)
#divide _BMI5 by 100 to convert it to kg/m^2
BRFSS <- BRFSS %>%
mutate(BMI5= `_BMI5` / 100) %>%
select(-`_BMI5`)
#save the data
write.csv(BRFSS, "Data/BRFSS_cleaned.csv", row.names = FALSE)
#regress _BMI5 on unemployment_rate
model_bmi_unemp <- lm(`_BMI5` ~ unemployment_rate, data = BRFSS)
#regress _BMI5 on unemployment_rate
model_bmi_unemp <- lm(BMI5 ~ unemployment_rate, data = BRFSS)
#print the summary of the model
summary(model_bmi_unemp)
#divide unemployment_rate by 100 to convert it to a percentage
BRFSS <- BRFSS %>%
mutate(unemployment_rate = unemployment_rate / 100)
#regress _BMI5 on unemployment_rate
model_bmi_unemp <- lm(BMI5 ~ unemployment_rate, data = BRFSS)
#print the summary of the model
summary(model_bmi_unemp)
#load xpt data
BRFSS <- read_xpt("Data/BRFSS.xpt")
#keep only the variables _BMI5, SEX, AGE, INCOME2, EDUCA, MARITAL, MENTHLTh
BRFSS <- BRFSS %>%
select(`_BMI5`, SEX, AGE, INCOME2, EDUCA, MARITAL, MENTHLTH, `_CNTY`, `_STATE`)
#generate a variable GEOID equal `_STATE` + `_CNTY`
BRFSS <- BRFSS %>%
mutate(GEOID = paste0(sprintf("%02d", `_STATE`), sprintf("%03d", `_CNTY`))) %>%
select(-`_STATE`, -`_CNTY`)
# Merge BRFSS with county unemployment data using GEOID, only keep matched observations
BRFSS <- merge(BRFSS, county_unemp, by = "GEOID", all.x = FALSE)
#replace the value 88 of MENTHLTH by 0
BRFSS$MENTHLTH[BRFSS$MENTHLTH == 88] <- 0
#replace the value 99 and 77 of MENTHLTH by NA
BRFSS$MENTHLTH[BRFSS$MENTHLTH == 99 | BRFSS$MENTHLTH == 77] <- NA
#replace the value 99 and 77 of INCOME2 by NA
BRFSS$INCOME2[BRFSS$INCOME2 == 99 | BRFSS$INCOME2 == 77] <- NA
#replace the value 99 of AGE by NA
BRFSS$AGE[BRFSS$AGE == 99] <- NA
#generate a dummy variable equal 1 if EDUCA is 5 or 6
BRFSS <- BRFSS %>%
mutate(College = ifelse(EDUCA %in% c(5, 6), 1, 0))
#drop EDUCA
BRFSS <- BRFSS %>%
select(-EDUCA)
#generate a dummy variable equal 1 if MARITAL is 1
BRFSS <- BRFSS %>%
mutate(Married = ifelse(MARITAL == 1, 1, 0))
#drop MARITAL
BRFSS <- BRFSS %>%
select(-MARITAL)
#generate a dummy variable equal 1 if SEX is 2
BRFSS <- BRFSS %>%
mutate(Female = ifelse(SEX == 2, 1, 0))
#drop MARITAL
BRFSS <- BRFSS %>%
select(-SEX)
#divide _BMI5 by 100 to convert it to kg/m^2
BRFSS <- BRFSS %>%
mutate(BMI5= `_BMI5` / 100) %>%
select(-`_BMI5`)
#save the data
write.csv(BRFSS, "Data/BRFSS_cleaned.csv", row.names = FALSE)
#regress _BMI5 on unemployment_rate
model_bmi_unemp <- lm(BMI5 ~ unemployment_rate, data = BRFSS)
#print the summary of the model
summary(model_bmi_unemp)
library(stargazer)
#use stargazer to save the table in latex
stargazer(model_bmi_unemp, type = "text", title = "Regression of BMI on Unemployment Rate",
dep.var.labels = "BMI", covariate.labels = "Unemployment Rate",
out = "HW_tables/HW_4.2_b.txt")
stargazer(model_bmi_unemp, type = "latex", title = "Regression of BMI on Unemployment Rate",
dep.var.labels = "BMI", covariate.labels = "Unemployment Rate",
out = "HW_tables/HW_4.2_b.txt")
#use stargazer to save the table in latex
stargazer(model_bmi_unemp, type = "latex", title = "Regression of BMI on Unemployment Rate",
dep.var.labels = "BMI", covariate.labels = "Unemployment Rate",
out = "HW_tables/HW_4.2_b.tex")
model_menthlth_unemp <- lm(MENTHLTH ~ unemployment_rate, data = BRFSS)
summary(model_menthlth_unemp)
#use stargazer to save the table in latex
stargazer(model_menthlth_unemp, type = "latex", title = "Regression of Mental Health Days on Unemployment Rate",
dep.var.labels = "Mental Health Days", covariate.labels = "Unemployment Rate",
out = "HW_tables/HW_4.2_c.tex")
model_menthlth_unemp <- lm(MENTHLTH ~ unemployment_rate + AGE + Female + INCOME2 + Collage + Married, data = BRFSS)
#regress MENTHLTH on unemployment_rate and add controls
model_menthlth_unemp <- lm(MENTHLTH ~ unemployment_rate + AGE + Female + INCOME2 + College + Married, data = BRFSS)
summary(model_menthlth_unemp)
#use stargazer to save the table in latex
stargazer(model_menthlth_unemp, type = "latex", title = "Regression of Mental Health Days on Unemployment Rate",
dep.var.labels = "Mental Health Days", covariate.labels = "Unemployment Rate",
out = "HW_tables/HW_4.4_2_a.tex")
#clear the workspace
rm(list=ls())
#set the working directly
setwd("C:/Users/janaa/OneDrive - University of Pittsburgh/3rd Year/Summer teaching/0150")
#load the libraries
library(tidyr)
library(ggplot2)
library(dplyr)
#install.packages("ggrepel")
library(ggrepel)
library(tidycensus)
library(tidyverse)
# Add and save your API key
census_api_key("932c5fe910c462d161f71af34e34b42705517abf", overwrite = TRUE, install = TRUE)
# Reload the session after setting the key
readRenviron("~/.Renviron")
# Define the year and variable (Median Household Income)
year <- 2023
vars <- c("B19013_001")  # Median household income
pa_county <- get_acs(
geography = "county",
state = "PA",              # <--- Limits to Pennsylvania
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 30 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_30 <- pa_county %>%
slice_sample(n = 30)
#save the sample data
write.csv(pa_sample_30, "Data/pa_sample_30.csv")
# View basic summary statistics
summary_stats <- pa_sample_30 %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_30$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
# Extract specific values
cat("Sample size (n):", length(pa_sample_30$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_30$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_30$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
# Download tract-level data for Pennsylvania only
pa_county <- get_acs(
geography = "tract",
state = "PA",
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 30 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_30 <- pa_county %>%
slice_sample(n = 1000)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
pa_tract <- get_acs(
geography = "tract",
state = "PA",
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 30 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_30 <- pa_county %>%
slice_sample(n = 1000)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
pa_tract <- get_acs(
geography = "tract",
state = "PA",
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 30 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 1000)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
# Extract specific values
cat("Sample size (n):", length(pa_sample_30$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_30$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_30$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
cat("Sample size (n):", length(pa_sample_tracts$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_tracts$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_tracts$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
# Download tract-level data for Pennsylvania only
pa_tract <- get_acs(
geography = "tract",
state = "PA",
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 30 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 1500)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
# Extract specific values
cat("Sample size (n):", length(pa_sample_tracts$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_tracts$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_tracts$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
pa_tract <- get_acs(
geography = "tract",
state = "PA",
variables = vars,
year = year,
survey = "acs5"
) %>%
select(GEOID, NAME, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
rename(county_id = GEOID,
county_name = NAME,
median_income = B19013_001) %>%
mutate(Year = year)
#choose a random sample of 1500 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 500)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 2000)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 200)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
# Extract specific values
cat("Sample size (n):", length(pa_sample_tracts$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_tracts$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_tracts$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
#choose a random sample of 1500 counties from the dataset
set.seed(2025)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 100)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
set.seed(2025)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 200)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
#choose a random sample of 1500 counties from the dataset
set.seed(42)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 100)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
set.seed(42)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 200)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
#choose a random sample of 1500 counties from the dataset
set.seed(42)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 3000)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
#choose a random sample of 1500 counties from the dataset
set.seed(42)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 50)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
#choose a random sample of 1500 counties from the dataset
set.seed(42)  # Set seed for reproducibility
pa_sample_tracts <- pa_tract %>%
slice_sample(n = 60)
# View basic summary statistics
summary_stats <- pa_sample_tracts %>%
summarise(
sample_size = n(),
sample_mean = mean(median_income, na.rm = TRUE),
sample_sd   = sd(median_income, na.rm = TRUE)
)
print(summary_stats)
# Run one-sample t-test against benchmark value $73,824
benchmark_income <- 73824
ttest_result <- t.test(pa_sample_tracts$median_income, mu = benchmark_income)
# Print results
print(ttest_result)
#save the sample data
write.csv(pa_sample_tracts, "Data/pa_sample_tracts.csv")
# Extract specific values
cat("Sample size (n):", length(pa_sample_tracts$median_income), "\n")
cat("Sample mean:", round(mean(pa_sample_tracts$median_income), 2), "\n")
cat("Standard deviation:", round(sd(pa_sample_tracts$median_income), 2), "\n")
cat("t-statistic:", round(ttest_result$statistic, 3), "\n")
cat("Degrees of freedom:", ttest_result$parameter, "\n")
cat("p-value:", round(ttest_result$p.value, 4), "\n")
cat("95% Confidence Interval:", paste(round(ttest_result$conf.int[1], 2), "to", round(ttest_result$conf.int[2], 2)), "\n")
