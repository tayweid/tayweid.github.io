---
format:
  revealjs:
    css: custom.css
    transition: none
---

## ECON 0150 | Economic Data Analysis {.center}
<p class="subheader-center">The economist's data analysis pipeline.</p>

<br> 

### *Exercise 1.7 | Grouping Data*

---

## Exercise 1.7 | Starbucks Offers
<p class="subheader">Q. Which promotional offers change behavior the most?</p>

1. How likely is each offer-type to be used?

. . .

- How many times was each offer-type sent?
- How many times was each offer-type used?

. . .

2. What's the average revenue per offer-type?

. . .

- What is the total revenue for each offer-type?
- How many times was each offer-type sent?
- What is the average revenue for each offer-type?

---

## Starbucks Offers: Grouping and Counting
<p class="subheader">How frequent is each offer-type?</p>

Lets start by counting each offer-type in the ***categorical variable*** `Offer ID`.

. . .

```{.python}
# Count offers by Offer ID
offers_count = data.groupby("Offer ID")["Offer ID"].count()
```

. . .

![](i/i_01.png)

---

## Starbucks Offers: Grouping and Counting
<p class="subheader">How frequent is each offer-type?</p>

Lets also group on `Event` to count event-types.

. . .

```{.python}
# Count number of each event
event_count = data.groupby("Event")["Event"].count()
```

. . .

![](i/i_02.png)

---

## Starbucks Offers: Grouping and Summing
<p class="subheader">What is the total revenue for each event-type?</p>

Lets group on `Event` and find the total revenue by event-type.

. . .

```{.python}
# Summarize total revenue by 'Event'
event_summary = data.groupby("Event")["Revenue"].sum()
```

. . .

![](i/i_03.png)

---

## Starbucks Offers: Grouping and Counting
<p class="subheader">How many times was each offer-type sent?</p>

Lets filter `Event` for just 'offer' then group on `Offer ID` and count.

. . .

. . .

![](i/i_04.png)

---

## Starbucks Offers: Grouping and Counting
<p class="subheader">How many times was each offer-type used?</p>

Lets filter `Event` for just 'transaction' then group on `Offer ID` and count.

. . .

```{.python}
# Count transactions by Offer ID
transactions_only = data[data["Event"] == "transaction"] # Filter for Transaction
transactions_count = transactions_only.groupby("Offer ID")["Event"].count()
```

. . .

![](i/i_05.png)

---

## Starbucks Offers: Simple Transformations
<p class="subheader">How likely is each offer-type to be used?</p>

Lets divide the number of transactions by the number of offers sent by offer-type.

. . .

. . .

![](i/i_06.png)

---

## Starbucks Offers: Simple Transformations
<p class="subheader">How likely is each offer-type to be used?</p>

Lets divide the number of transactions by the number of offers sent by offer-type.

. . .

. . .

![](i/i_06.png)

---

## Starbucks Offers: Grouping and Summing
<p class="subheader">What is the total revenue for each offer-type?</p>

Before finding average revenue by `Offer ID`, lets start by finding total revenue.

. . .

```{.python}
# Sum revenue by Offer ID
grouped_revenue = data.groupby("Offer ID")["Revenue"].sum()
```

. . .

![](i/i_07.png)

---

## Starbucks Offers: Grouping and Averaging
<p class="subheader">What is the average transaction amount per offer type?</p>

Lets find the average (mean) transaction amount by offer-type.

. . .

```{.python}
# Take the mean revenue
mean_revenue = transaction_groups["Revenue"].mean()
```

. . .

![](i/i_08.png)

---

## Starbucks Offers: Grouping and Averaging
<p class="subheader">What's the average revenue per offer-type?</p>

Lets find how much revenue we can expect after sending each offer-type.

. . .

. . .

![](i/i_09.png)

---

## Starbucks Offers: Conclusions
<p class="subheader">Q. Which promotional offers change behavior the most?</p>

<br><br>

1. The offer 3off7 has a high **redemption rate** but the discount may be costly.

. . .

*> people respond most to the 'best' deal*

. . .

2. The offer 5off20 has the highest **revenue** but a lower **redemption rate**.

. . .

*> people will spend the most when its required to redeam the offer*

. . .

3. The offer 2off10 is a more modest discount and is second in on **both metrics**.