---
format:
  revealjs:
    css: custom.css
    transition: none
    aspect-ratio: "16:9"
---

## ECON 0150 | Economic Data Analysis {.center}
<p class="subheader">The economist's data analysis pipeline.</p>

<br> 

### *Part 5.1 | Fixed Effects and Interaction Models*

---

## Example: The Gender Wage Gap
<p class="subheader">Using the general linear model to understand wage differences.</p>

<br>

**Key Questions:**

- Is there a wage gap between male / female?
- Are returns to education different between male / female?
- How can we model these questions with a regression framework?

. . .

*> lets build this analysis step by step*

---

## Model 1: The Gender Wage Gap
<p class="subheader">We can use an indicator variable to capture level differences.</p>

. . .

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times \text{Male} + \varepsilon$$

. . .

```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats
import matplotlib.patches as patches
from matplotlib.lines import Line2D

# Set seed for reproducibility
np.random.seed(42)

# Generate education data as "years after middle school" (starting at 0)
n = 200
education_after_ms = np.random.normal(6, 2, n)  # years after middle school (8th grade)
education_after_ms = np.clip(education_after_ms, 0, 14)  # 0-14 years after middle school

# Create gender indicator (0 = female, 1 = male)
gender = np.random.binomial(1, 0.5, n)

# Generate wages with gender gap
base_wage_female = 25000  # female base wage (β₀)
education_effect = 3000   # return to education (β₁)
gender_gap = 8000         # male premium (β₂)

wages = (base_wage_female + 
         education_effect * education_after_ms + 
         gender_gap * gender + 
         np.random.normal(0, 4000, n))  # smaller error for clearer visualization

# Create figure
fig, ax = plt.subplots(figsize=(11, 5))

# Plot data points with low alpha for clarity
ax.scatter(education_after_ms[gender==0], wages[gender==0], 
           alpha=0.15, color='red')
ax.scatter(education_after_ms[gender==1], wages[gender==1], 
           alpha=0.15, color='green')

# Create stylized regression lines
x_line = np.linspace(0, 13, 100)
y_female = base_wage_female + education_effect * x_line
y_male = base_wage_female + gender_gap + education_effect * x_line

# Plot regression lines
ax.plot(x_line, y_male, color='green', linewidth=3, label='Male')
ax.plot(x_line, y_female, color='red', linewidth=3, label='Female')

# β₀ (female intercept) - using a bracket
ax.annotate('', xy=(-0.4, base_wage_female), xytext=(-0.4, 0),
            arrowprops=dict(arrowstyle='|-|', color='red', alpha=0.4, lw=2))
ax.annotate('$\\beta_0$ (Base wage)', xy=(-0.4, base_wage_female/2), 
            xytext=(-3, base_wage_female*0.5), fontsize=12,
            arrowprops=dict(arrowstyle='->', color='black'))

# β₂ (male premium) - using a bracket
ax.annotate('', xy=(-0.4, base_wage_female+gender_gap), xytext=(-0.4, base_wage_female),
            arrowprops=dict(arrowstyle='|-|', color='green', alpha=0.4, lw=2))
ax.annotate('$\\beta_2$ (Wage Gap)', xy=(-0.4, base_wage_female+gender_gap/2), 
            xytext=(-3, base_wage_female + gender_gap*0.5), fontsize=12,
            arrowprops=dict(arrowstyle='->', color='black'))

# Styling
ax.set_xlabel('Years of Education (after Middle School)', fontsize=12)
ax.set_ylabel('')
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.set_xlim(-2, 16)
ax.set_xticks([0,13])
ax.set_ylim(0, 80000)
ax.set_yticks([0,80000])
ax.set_yticklabels([])

ax.legend(fontsize=11)

sns.despine(left=True, trim=True)

plt.tight_layout()
```

<br>

---

## Model 1: The Gender Wage Gap
<p class="subheader">We can use an indicator variable to capture level differences.</p>

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times I(\text{Male}) + \varepsilon$$

*> β₀ is the base wage for those with no post-middle school education*

. . .

*> β₂ represents the gender wage gap - added to the intercept for males only*

. . .

*> model assumes parallel lines - same returns to education (β₁) for everyone*

---

## Model 1: The Code
<p class="subheader">Implementing the gender fixed effect model</p>

```python
import statsmodels.formula.api as smf

# Fit the model with male indicator
model1 = smf.ols('INCLOG10 ~ EDU + MALE', data=df).fit()
print(model1.summary())
```

. . .

**Interpretation:**

- β₀: Base wage for females with zero education
- β₁: Return to each year of education (for everyone)
- β₂: Additional wage premium for males

. . .

*> if β₂ > 0 and statistically significant, evidence of a gender wage gap*

---

## Model 2: Different Returns to Education
<p class="subheader">What if education benefits genders differently?</p>

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times \text{Education} \times \text{Male} + \varepsilon$$

. . .

```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats
import matplotlib.patches as patches
from matplotlib.lines import Line2D
# Set seed for reproducibility
np.random.seed(42)
# Generate education data as "years after middle school" (starting at 0)
n = 200
education_after_ms = np.random.normal(6, 2, n)  # years after middle school
education_after_ms = np.clip(education_after_ms, 0, 14)
# Create gender indicator (0 = female, 1 = male)
gender = np.random.binomial(1, 0.5, n)
# Generate wages with different returns to education by gender
base_wage = 25000  # base wage (β₀)
education_effect_female = 2500  # female return to education (β₁)
education_effect_male = 4000    # male return to education (β₁ + β₂)
# Calculate wages based on different returns by gender
wages = (base_wage + 
         np.where(gender == 0, 
                 education_effect_female * education_after_ms,
                 education_effect_male * education_after_ms) + 
         np.random.normal(0, 4000, n))
# Create figure
fig, ax = plt.subplots(figsize=(11, 5))
# Plot data points with low alpha for clarity
ax.scatter(education_after_ms[gender==0], wages[gender==0], 
           alpha=0.15, color='red')
ax.scatter(education_after_ms[gender==1], wages[gender==1], 
           alpha=0.15, color='green')
# Create stylized regression lines
x_line = np.linspace(0, 13, 100)
y_female = base_wage + education_effect_female * x_line
y_male = base_wage + education_effect_male * x_line
# Plot regression lines
ax.plot(x_line, y_male, color='green', linewidth=3, label='Male')
ax.plot(x_line, y_female, color='red', linewidth=3, label='Female')

# Rise over run visualization at a larger x value
start_x = 8  # Moved further along the x-axis
run_distance = 2  # Increased horizontal distance for visibility

# Calculate y-coordinates for the starting points on the regression lines
start_y_female = base_wage + education_effect_female * start_x
start_y_male = base_wage + education_effect_male * start_x

# Calculate the end points
end_x = start_x + run_distance
end_y_female = base_wage + education_effect_female * end_x
end_y_male = base_wage + education_effect_male * end_x

# Draw the right-angled triangles correctly
# Female triangle
ax.plot([start_x, end_x], [start_y_female, start_y_female], 'r--', lw=1.5)  # horizontal line at the bottom
ax.plot([end_x, end_x], [start_y_female, end_y_female], 'r--', lw=1.5)     # vertical line at the end
# The hypotenuse is the regression line itself (already plotted)

# Male triangle
ax.plot([start_x, end_x], [start_y_male, start_y_male], 'g--', lw=1.5)     # horizontal line at the bottom
ax.plot([end_x, end_x], [start_y_male, end_y_male], 'g--', lw=1.5)         # vertical line at the end
# The hypotenuse is the regression line itself (already plotted)

# Label the female rise (β₁ × run_distance)
female_rise = end_y_female - start_y_female
ax.annotate('$\\beta_1$', 
            xy=(end_x, start_y_female + female_rise/2), 
            xytext=(end_x + 1, start_y_female + female_rise/2), 
            fontsize=12, ha='left', va='center',
            arrowprops=dict(arrowstyle='->', color='red'))

# Label the male rise (β₁ + β₂) × run_distance
male_rise = end_y_male - start_y_male
ax.annotate('$\\beta_1 + \\beta_2$', 
            xy=(end_x, start_y_male + male_rise/2), 
            xytext=(end_x + 1, start_y_male + male_rise/2), 
            fontsize=12, ha='left', va='center',
            arrowprops=dict(arrowstyle='->', color='green'))

# Label the horizontal run
ax.annotate(1, xy=(start_x + run_distance/2, start_y_female - 2000), 
            fontsize=12, ha='center', va='top')

# β₀ (female intercept) - using a bracket
ax.annotate('', xy=(-0.4, base_wage_female), xytext=(-0.4, 0),
            arrowprops=dict(arrowstyle='|-|', color='red', alpha=0.4, lw=2))
ax.annotate('$\\beta_0$ (Base wage)', xy=(-0.4, base_wage_female/2), 
            xytext=(-3, base_wage_female*0.5), fontsize=12,
            arrowprops=dict(arrowstyle='->', color='black'))

# Styling
ax.set_xlabel('Years of Education (after Middle School)', fontsize=12)
ax.set_ylabel('')
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.set_xlim(-2, 16)
ax.set_xticks([0,13])
ax.set_ylim(0, 80000)
ax.set_yticks([0,80000])
ax.set_yticklabels([])
ax.legend(fontsize=11)
sns.despine(left=True, trim=True)
plt.tight_layout()
```

---

## Model 2: Different Returns to Education
<p class="subheader">What if education benefits genders differently?</p>

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times \text{Education} \times \text{Male} + \varepsilon$$

*> β₁ represents the female return to education*

. . .

*> β₂ represents the additional male return to education - this changes the slope*

. . .

*> male education effect is β₁ + β₂, creating diverging wage paths*

---

## Model 2: The Code
<p class="subheader">Implementing the education-gender interaction model</p>

```python
# Fit model with interaction between education and sex
model2 = smf.ols('INCLOG10 ~ EDU + EDU:MALE', data=df).fit()
print(model2.summary())
```

. . .

**Interpretation:**

- β₀: Base wage with zero education
- β₁: Female return to education
- β₂: Additional male return to education

. . .

*> if β₂ > 0 and significant, male return to education is higher*

. . .

*> this model assumes same baseline (intercept) for both sexes*

---

## Model 3: Full Gender Difference Model
<p class="subheader">Combining fixed effects and interactions</p>

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times \text{Male} + \beta_3 \times \text{Education} \times \text{Male} + \varepsilon$$

. . .

```{python}
# Let's compare the two code snippets to identify style differences

# Key style elements in model 2 (first code snippet):
# - Uses np.random.seed(42)
# - Uses alpha=0.15 for scatter points
# - Has simple spines (top and right removed)
# - Uses specific colors (red for female, green for male)
# - Has annotations with arrows
# - Uses specific font sizes
# - Has custom legend

# Key differences in model 3 (second code snippet):
# - Uses seaborn styles ('seaborn-v0_8-whitegrid' and sns.set_style("white"))
# - Has different annotation positions and styles
# - Has a title
# - Has different y-axis labeling

# Let's modify model 3 to match model 2's style
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats
import matplotlib.patches as patches
from matplotlib.lines import Line2D

# Remove seaborn styling to match model 2
# plt.style.use('seaborn-v0_8-whitegrid')  # Comment out
# sns.set_style("white")  # Comment out

# Set seed for reproducibility
np.random.seed(42)

# Generate education data as "years after middle school" (starting at 0)
n = 200
education_after_ms = np.random.normal(6, 2, n)  # years after middle school
education_after_ms = np.clip(education_after_ms, 0, 14)

# Create gender indicator (0 = female, 1 = male)
gender = np.random.binomial(1, 0.5, n)

# Generate wages with both gender gap and different returns
base_wage_female = 25000     # female base wage (β₀)
male_premium = 5000          # male premium at zero education (β₂)
education_effect_female = 2500  # female education return (β₁)
extra_male_return = 1500     # extra male education return (β₃)

# Calculate wages
wages = np.zeros(n)
for i in range(n):
    if gender[i] == 0:  # Female
        wages[i] = base_wage_female + education_effect_female * education_after_ms[i]
    else:  # Male
        wages[i] = (base_wage_female + male_premium + 
                   (education_effect_female + extra_male_return) * education_after_ms[i])

# Add some random noise
wages += np.random.normal(0, 4000, n)

# Create figure with same size as model 2
fig, ax = plt.subplots(figsize=(11, 5))  # Changed to match model 2

# Plot data points with low alpha for clarity
ax.scatter(education_after_ms[gender==0], wages[gender==0], 
           alpha=0.15, color='red')  # Removed label to match model 2
ax.scatter(education_after_ms[gender==1], wages[gender==1], 
           alpha=0.15, color='green')  # Removed label to match model 2

# Create stylized regression lines
x_line = np.linspace(0, 13, 100)  # Match the range in model 2
y_female = base_wage_female + education_effect_female * x_line
y_male = (base_wage_female + male_premium + 
         (education_effect_female + extra_male_return) * x_line)

# Plot regression lines
ax.plot(x_line, y_male, color='green', linewidth=3, label='Male')  # Simplified label
ax.plot(x_line, y_female, color='red', linewidth=3, label='Female')  # Simplified label

# Highlight the components visually - modified to be more like model 2

# Rise over run visualization at a point
start_x = 8  # Match position in model 2
run_distance = 2  # Match distance in model 2

# Calculate y-coordinates for the starting points on the regression lines
start_y_female = base_wage_female + education_effect_female * start_x
start_y_male = base_wage_female + male_premium + (education_effect_female + extra_male_return) * start_x

# Calculate the end points
end_x = start_x + run_distance
end_y_female = base_wage_female + education_effect_female * end_x
end_y_male = base_wage_female + male_premium + (education_effect_female + extra_male_return) * end_x

# Draw the right-angled triangles
# Female triangle
ax.plot([start_x, end_x], [start_y_female, start_y_female], 'r--', lw=1.5)  # horizontal
ax.plot([end_x, end_x], [start_y_female, end_y_female], 'r--', lw=1.5)     # vertical

# Male triangle
ax.plot([start_x, end_x], [start_y_male, start_y_male], 'g--', lw=1.5)     # horizontal
ax.plot([end_x, end_x], [start_y_male, end_y_male], 'g--', lw=1.5)         # vertical

# Label the female rise (β₁ × run_distance)
female_rise = end_y_female - start_y_female
ax.annotate('$\\beta_1$', 
            xy=(end_x, start_y_female + female_rise/2), 
            xytext=(end_x + 1, start_y_female + female_rise/2), 
            fontsize=12, ha='left', va='center',
            arrowprops=dict(arrowstyle='->', color='red'))

# Label the male rise ((β₁+β₃) × run_distance)
male_rise = end_y_male - start_y_male
ax.annotate('$\\beta_1 + \\beta_3$', 
            xy=(end_x, start_y_male + male_rise/2), 
            xytext=(end_x + 1, start_y_male + male_rise/2), 
            fontsize=12, ha='left', va='center',
            arrowprops=dict(arrowstyle='->', color='green'))

# Label the horizontal run
ax.annotate(1, xy=(start_x + run_distance/2, start_y_female - 2000), 
            fontsize=12, ha='center', va='top')

# β₀ (female intercept) - using a bracket
ax.annotate('', xy=(-0.4, base_wage_female), xytext=(-0.4, 0),
            arrowprops=dict(arrowstyle='|-|', color='red', alpha=0.4, lw=2))
ax.annotate('$\\beta_0$ (Base wage)', xy=(-0.4, base_wage_female/2), 
            xytext=(-3, base_wage_female*0.5), fontsize=12,
            arrowprops=dict(arrowstyle='->', color='black'))

# Add β₂ (male premium at zero education)
ax.annotate('', xy=(-0.4, base_wage_female+male_premium), xytext=(-0.4, base_wage_female),
            arrowprops=dict(arrowstyle='|-|', color='green', alpha=0.4, lw=2))
ax.annotate('$\\beta_2$ (Wage premium)', xy=(-0.4, base_wage_female+male_premium/2), 
            xytext=(-3, base_wage_female+male_premium*1.2), fontsize=12,
            arrowprops=dict(arrowstyle='->', color='black'))

# Styling
ax.set_xlabel('Years of Education (after Middle School)', fontsize=12)  # Match label
ax.set_ylabel('')  # Remove y-label to match model 2
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.set_xlim(-2, 16)  # Match limits
ax.set_xticks([0, 13])  # Match ticks
ax.set_ylim(0, 80000)  # Match limits
ax.set_yticks([0, 80000])  # Match ticks
ax.set_yticklabels([])  # Match empty labels

# Legend matching model 2
ax.legend(fontsize=11)

# Add despine to match model 2
sns.despine(left=True, trim=True)

plt.tight_layout()

# Display the plot
plt.show()
```

## Model 3: Full Gender Difference Model
<p class="subheader">Combining fixed effects and interactions</p>

$$\text{Wage} = \beta_0 + \beta_1 \times \text{Education} + \beta_2 \times \text{Male} + \beta_3 \times \text{Education} \times \text{Male} + \varepsilon$$

*> β₀ = base wage*

. . .

*> β₂ = initial wage gap (at zero education)*

. . .

*> β₁ = female returns to education*

. . .

*> β₃ = male education return premium*

---

## Model 3: The Code
<p class="subheader">Implementing the full gender difference model</p>

```python
# Fit full model with both sex indicator and interaction
model3 = smf.ols('INCLOG10 ~ EDU + MALE + EDU:MALE', data=df).fit()
print(model3.summary())
```

. . .

**Interpretation:**

- β₀: Base wage for females with zero education
- β₁: Return to education for females
- β₂: Additional base wage for males (at zero education)
- β₃: Additional return to education for males

. . .

*> allows for differences in both baseline wages and educational returns*

---

## Comparison of Models
<p class="subheader">Different models answer different questions</p>

<br>

1. **Model 1: Fixed Effect**
   - Question: "Is there a gender wage gap?"
   - Focus: Level differences in wages

. . .

2. **Model 2: Interaction Only**
   - Question: "Are there differences in returns to education?"
   - Focus: Slope differences in education effects

. . .

3. **Model 3: Full Model**
   - Question: "Does the gender wage gap vary with education level?"
   - Focus: Comprehensive gender differences pattern

. . .

*> choose the model that best addresses your research question*

---

## When to Use Each Model?
<p class="subheader">Choosing the right model for your research question</p>

<br>

1. **Use Model 1 (Fixed Effect) when:**
   - You want to estimate the average wage gap across all education levels
   - You believe returns to education are similar for all groups

. . .

2. **Use Model 2 (Interaction Only) when:**
   - You're specifically interested in differential returns to education
   - You believe there's no baseline difference between groups

. . .

3. **Use Model 3 (Full Model) when:**
   - You want to explore how the wage gap varies with education
   - You're testing for both baseline differences and differential returns

. . .

*> always let your research question drive model selection*

---

## Key Takeaways
<p class="subheader">General linear model for analyzing group differences</p>

<br>

*> the general linear model is a versatile tool for inequality research*

. . .

<br>

1. **Fixed effects** capture level differences between groups

. . .

2. **Interactions** capture slope differences (differential returns)

. . .

3. **Combining both** gives a complete picture of how relationships vary by group

. . .

4. **Model choice** should be guided by your research question

. . .

*> these tools are essential for analyzing disparities in economics*