---
format:
  revealjs:
    css: custom.css
    transition: none
    aspect-ratio: "16:9"
---

## ECON 0150 | Economic Data Analysis {.center}
<p class="subheader">The economist's data analysis pipeline.</p>

<br> 

### *Part 5.4 | Using GLM Appropriately*

---

## Selecting the appropriate test
<p class="subheader">Matching research questions with appropriate statistical approaches</p>

<br>

**Focus:**

- Translating research questions into appropriate models
- Visualizing data to inform modeling choices
- Selecting and interpreting the right regression approach
- Examples across various economic contexts

---

## Example 1: Impact of Microlending
<p class="subheader">Do microloans improve income in low-income communities?</p>

**Research Question:**
*Does a microlending program increase average monthly income in a low-income community?*

. . .

**The Data:**

- Monthly income (in USD) for 45 participants before and after receiving microloans
- Data structure: Panel Data (paired observations)

---

## Example 1: Impact of Microlending
<p class="subheader">Do microloans improve income in low-income communities?</p>

**Visualization:** jittered scatter, boxplot, line graph, histogram

```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats

# Set seed for reproducibility
np.random.seed(42)

# Generate data for income before and after microloan program
n = 45
income_before = np.random.lognormal(mean=5.5, sigma=0.4, size=n)
# Effect varies by initial income level (smaller effect for higher initial incomes)
effect = 300 - 0.1 * income_before + np.random.normal(0, 50, n)
income_after = income_before + effect

# Create paired data
income_df = pd.DataFrame({
    'Before': income_before,
    'After': income_after,
    'Difference': income_after - income_before
})

# Create the visualization
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

# First plot: Before-After connected lines
# Sort the data for a cleaner visualization
sorted_indices = np.argsort(income_before)
sorted_before = income_before[sorted_indices]
sorted_after = income_after[sorted_indices]

# Plot individual lines connecting before and after values
for i in range(n):
    ax1.plot([1, 2], [sorted_before[i], sorted_after[i]], 'gray', alpha=0.3)

# Add mean values as points
ax1.plot(1, np.mean(income_before), 'o', color='blue', markersize=10, label='Mean Before')
ax1.plot(2, np.mean(income_after), 'o', color='green', markersize=10, label='Mean After')

# Connect the means
ax1.plot([1, 2], [np.mean(income_before), np.mean(income_after)], 'r-', linewidth=3, label='Mean Change')

ax1.set_xticks([1, 2])
ax1.set_xticklabels(['Before', 'After'])
ax1.set_ylabel('Monthly Income (USD)')
ax1.set_title('Income Before and After Microloan Program')
ax1.grid(False)
ax1.legend()

# Second plot: Histogram of differences
sns.histplot(income_df['Difference'], kde=True, ax=ax2, color='blue', alpha=0.7)
ax2.axvline(x=np.mean(income_df['Difference']), color='r', linestyle='--', 
            label=f'Mean Diff = {np.mean(income_df["Difference"]):.1f}')
ax2.set_xlabel('Change in Monthly Income (USD)')
ax2.set_title('Distribution of Income Changes')
ax2.legend()
ax2.grid(False)

sns.despine()
plt.tight_layout()
plt.show()
```

. . .

**Model:** Paired Sample t-test

$$\text{income_change} = \beta_0$$


---

## Example 1: Impact of Microlending
<p class="subheader">Do microloans improve income in low-income communities?</p>

**Model:** Paired Sample t-test

$$\text{income_change} = \beta_0 + \epsilon$$

```python
# Create a dataframe with the differences
data = pd.DataFrame({'income_change': income_change})

# Run a one-sample t-test as regression
model = smf.ols('income_change ~ 1', data=data).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- The average monthly income increased by $\beta_0$ after the microloan program.
- We expect to see a result this extreme only p percent of the time.
- Or more standard: we reject the null ($\beta_0 = 0$) if p < 0.05.

---

## Example 2: Online Learning Effectiveness
<p class="subheader">Does online learning yield different outcomes than in-person learning?</p>

**Research Question:**
*Does learning format (online vs. in-person) affect student performance in economics courses?*

. . .

**The Data:**

- Final exam scores (0-100) for students in two different course sections
- One section taught online, the other in-person
- Random assignment of students to sections

---

## Example 2: Online Learning Effectiveness
<p class="subheader">Does online learning yield different outcomes than in-person learning?</p>

**Visualization:** boxplot, histogram

```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats

# Set seed for reproducibility
np.random.seed(42)

# Generate data
n_online = 80
n_inperson = 75

# Scores (slightly lower mean for online, slightly higher variance)
online_scores = np.random.normal(74, 12, n_online)
inperson_scores = np.random.normal(79, 10, n_inperson)

# Create DataFrame
data = pd.DataFrame({
    'Format': ['Online'] * n_online + ['In-Person'] * n_inperson,
    'Score': np.concatenate([online_scores, inperson_scores])
})

# Create visualization
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

# Boxplot
sns.boxplot(x='Format', y='Score', data=data, ax=ax1, palette=['#3498db', '#2ecc71'])
ax1.set_title('Distribution of Exam Scores by Learning Format')
ax1.set_xlabel('Learning Format')
ax1.set_ylabel('Final Exam Score (0-100)')

# Add individual data points with jitter
format_categories = ['Online', 'In-Person']
for i, format_type in enumerate(format_categories):
    subset = data[data['Format'] == format_type]
    # Add jitter to x-position
    x = np.random.normal(i, 0.08, size=len(subset))
    ax1.scatter(x, subset['Score'], alpha=0.4, edgecolor='none', s=40, 
                color=['#3498db', '#2ecc71'][i])

# Calculate means
online_mean = np.mean(online_scores)
inperson_mean = np.mean(inperson_scores)

# Add circular markers for the means
ax1.scatter([0, 1], [online_mean, inperson_mean], color='red', s=100, 
            marker='o', zorder=3)

# Add a line connecting the means
ax1.plot([0, 1], [online_mean, inperson_mean], color='red', linewidth=2, 
         linestyle='-', zorder=2, label='Mean Score Difference')

# Add text to show the exact difference
diff = inperson_mean - online_mean
ax1.annotate(f'Diff: {diff:.1f}', 
             xy=(0.5, (online_mean + inperson_mean)/2),
             xytext=(0.5, (online_mean + inperson_mean)/2 + 5),
             ha='center', va='bottom',
             bbox=dict(boxstyle='round,pad=0.3', fc='white', ec='gray', alpha=0.7))

ax1.legend()

# Histograms side by side
sns.histplot(data[data['Format'] == 'Online']['Score'], ax=ax2, color='#3498db', 
             alpha=0.6, label='Online', kde=True)
sns.histplot(data[data['Format'] == 'In-Person']['Score'], ax=ax2, color='#2ecc71', 
             alpha=0.6, label='In-Person', kde=True)
ax2.set_title('Distribution of Exam Scores')
ax2.set_xlabel('Final Exam Score (0-100)')
ax2.set_ylabel('Number of Students')
ax2.legend()

sns.despine()
plt.tight_layout()
plt.show()
```

. . .

**Model 2:** Two-Sample t-test (comparing groups)

$$\text{Score} = \beta_0 + \beta_1 \text{Online} + \epsilon$$

---

## Example 2: Online Learning Effectiveness
<p class="subheader">Does online learning yield different outcomes than in-person learning?</p>

**Model 2:** Two-Sample t-test (comparing groups)

$$\text{Score} = \beta_0 + \beta_1 \text{Online} + \epsilon$$

```python
# Create dummy variable
data['online'] = (data['Format'] == 'Online').astype(int)

# Run regression
model = smf.ols('Score ~ online', data=data).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- In-person students scored $\beta_1$ points higher on average than online students
- We expect to see a result this extreme only p percent of the time.
- The difference is statistically significant (p < 0.05)

---

## Example 3: Renewable Energy Investment Impact
<p class="subheader">How does investment in renewable energy affect carbon emissions?</p>

**Research Question:**
*What is the relationship between renewable energy investment and carbon emissions across countries?*

. . .

**The Data:**

- Cross-sectional data for 50 countries
- Renewable energy investment (% of GDP)
- Carbon emissions (tons per capita)
- GDP per capita (USD)

---

## Example 3: Renewable Energy Investment Impact
<p class="subheader">How does investment in renewable energy affect carbon emissions?</p>

**Visualization:** scatterplot
```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats

# Set seed for reproducibility
np.random.seed(42)

# Generate data for 50 countries
n = 50

# GDP per capita (log-normal distribution)
gdp_per_capita = np.random.lognormal(mean=9.5, sigma=1.0, size=n) / 1000

# Renewable investment (% of GDP) correlated with GDP per capita
renewable_investment = 1.5 + 0.1 * gdp_per_capita + np.random.normal(0, 0.5, n)
renewable_investment = np.clip(renewable_investment, 0.5, 6)  # Limit to realistic range

# Carbon emissions related to both GDP and renewables
carbon_emissions = 0.8 * gdp_per_capita - 2 * renewable_investment + np.random.normal(0, 2, n)
carbon_emissions = np.clip(carbon_emissions, 1, 25)  # Limit to realistic range

# Create dataframe
countries = pd.DataFrame({
    'GDP_per_capita': gdp_per_capita,
    'Renewable_Investment': renewable_investment,
    'Carbon_Emissions': carbon_emissions
})

# Create visualization
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

# First plot: Renewables vs Emissions, colored by GDP
scatter = ax1.scatter(countries['Renewable_Investment'], countries['Carbon_Emissions'], 
                    c=countries['GDP_per_capita'], cmap='viridis', 
                    s=80, alpha=0.8, edgecolors='white')
ax1.set_xlabel('Renewable Energy Investment (% of GDP)')
ax1.set_ylabel('Carbon Emissions (tons per capita)')
ax1.set_title('Carbon Emissions vs. Renewable Investment')
cbar = plt.colorbar(scatter, ax=ax1)
cbar.set_label('GDP per Capita (thousands USD)')

# Second plot: Partial regression plot (controlling for GDP)
# Regression of Emissions on GDP
model1 = np.polyfit(countries['GDP_per_capita'], countries['Carbon_Emissions'], 1)
residuals_emissions = countries['Carbon_Emissions'] - np.polyval(model1, countries['GDP_per_capita'])

# Regression of Renewables on GDP
model2 = np.polyfit(countries['GDP_per_capita'], countries['Renewable_Investment'], 1)
residuals_renewables = countries['Renewable_Investment'] - np.polyval(model2, countries['GDP_per_capita'])

# Plot residuals
ax2.scatter(residuals_renewables, residuals_emissions, alpha=0.8, s=80, color='purple', edgecolors='white')
ax2.axhline(y=0, color='gray', linestyle='--', alpha=0.3)
ax2.axvline(x=0, color='gray', linestyle='--', alpha=0.3)

# Add regression line to partial regression plot
model_resid = np.polyfit(residuals_renewables, residuals_emissions, 1)
x_line = np.array([min(residuals_renewables), max(residuals_renewables)])
y_line = np.polyval(model_resid, x_line)
ax2.plot(x_line, y_line, color='red', linewidth=2)

ax2.set_xlabel('Renewable Investment (residuals after GDP)')
ax2.set_ylabel('Carbon Emissions (residuals after GDP)')
ax2.set_title('Partial Regression Plot (controlling for GDP)')

sns.despine()
plt.tight_layout()
plt.show()
```

. . .

**Model 3:** Multiple Regression with Control Variable

$$\text{Carbon_Emissions} = \beta_0 + \beta_1 \text{Renewable_Investment} + \beta_2 \text{GDP_per_capita} + \epsilon$$

---

## Example 3: Renewable Energy Investment Impact
<p class="subheader">How does investment in renewable energy affect carbon emissions?</p>

**Model 3:** Multiple Regression with Control Variable

$$\text{Carbon_Emissions} = \beta_0 + \beta_1 \text{Renewable_Investment} + \beta_2 \text{GDP_per_capita} + \epsilon$$

```python
# Run multiple regression
model = smf.ols('Carbon_Emissions ~ Renewable_Investment + GDP_per_capita', 
                data=countries).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- Each 1 percentage point increase in renewable investment is associated with a β₁ change in carbon emissions, controlling for GDP

. . .

- Effect is statistically significant (p < 0.05)

. . .

- GDP per capita has a separate positive relationship with emissions (β₂)

. . .

- Multiple regression isolates the effect of renewables by controlling for GDP

---

## Example 4: Gender Wage Gap by Education
<p class="subheader">Does the gender wage gap vary with education level?</p>

**Research Question:**
*Does the gender wage gap differ across education levels?*

. . .

**The Data:**

- Survey of 500 full-time workers
- Hourly wage
- Gender
- Years of education
- Experience

---

## Example 4: Gender Wage Gap by Education
<p class="subheader">Does the gender wage gap vary with education level?</p>

**Visualization:** scatterplot, multiple groups
```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy import stats

# Set seed for reproducibility
np.random.seed(42)

# Generate data for 500 workers
n = 500

# Gender (categorical: 0 = Male, 1 = Female)
gender = np.random.binomial(1, 0.5, n)

# Education (years beyond high school: 0-10 years)
education = np.random.normal(4, 2, n)
education = np.clip(education, 0, 10)

# Experience (years)
experience = np.random.gamma(shape=2, scale=5, size=n)
experience = np.clip(experience, 1, 35)

# Base wage structure with interaction
base_wage = 15  # Base hourly wage
gender_penalty = -2  # Women earn less at baseline
edu_return = 1.5  # Return to education (per year)
edu_penalty = -0.5  # Women get less return to education
exp_return = 0.3  # Return to experience

# Hourly wages with noise
wages = (base_wage + 
         gender_penalty * gender + 
         edu_return * education + 
         edu_penalty * gender * education +
         exp_return * experience +
         np.random.normal(0, 2, n))

# Create dataframe
workers = pd.DataFrame({
    'gender': gender,
    'gender_str': ['Male' if g == 0 else 'Female' for g in gender],
    'education': education,
    'experience': experience,
    'wage': wages
})

# Create visualization
fig, (ax1) = plt.subplots(1, 1, figsize=(12, 4))

# First plot: Scatter with regression lines by gender
sns.scatterplot(x='education', y='wage', hue='gender_str', 
                data=workers, alpha=0.5, s=40, ax=ax1)

# Add regression lines
for g, color in zip([0, 1], ['blue', 'red']):
    subset = workers[workers['gender'] == g]
    # Simple linear fit
    x = np.array([0, 10])
    model = np.polyfit(subset['education'], subset['wage'], 1)
    y = np.polyval(model, x)
    ax1.plot(x, y, color=color, linewidth=3)

ax1.set_xlabel('Years of Education (beyond high school)')
ax1.set_ylabel('Hourly Wage (USD)')
ax1.set_title('Wage vs. Education by Gender')
ax1.legend(title='Gender')

sns.despine()
plt.tight_layout()
plt.show()
```

. . .

**Model 4:** Interaction Model

$$wage = \beta_0 + \beta_1 female + \beta_2 edu \beta_3 female \cdot edu + \beta_3 exp + \epsilon$$

---

## Example 4: Gender Wage Gap by Education
<p class="subheader">Does the gender wage gap vary with education level?</p>

**Model 4:** Interaction Model

$$wage = \beta_0 + \beta_1 female + \beta_2 edu \beta_3 female \cdot edu + \beta_3 exp + \epsilon$$

. . .

```python
# Create female dummy variable
workers['female'] = workers['gender']

# Run interaction model
model = smf.ols('wage ~ female + education + female:education + experience', 
               data=workers).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- β₁: Base gender gap for workers with no education beyond high school
- β₂: Return to education for male workers
- β₃: Additional effect of education for female workers (beyond the male return)

---

## Example 5: Housing Prices and Transit
<p class="subheader">How does transit access and green space affect housing prices?</p>

**Research Question:**
*How does public transit access and green space proximity affect residential property values?*

. . .

**The Data:**

- Housing transactions in a metropolitan area (n = 300)
- Sale price
- Square footage
- Transit score (0-100)
- Green space proximity (binary)

---

## Example 5: Housing Prices and Transit
<p class="subheader">How does transit access and green space affect housing prices?</p>

**Visualization:** scatterplot, multiple groups
```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Set seed for reproducibility
np.random.seed(42)

# Generate data
n = 300

# Home characteristics
sq_footage = np.random.normal(1800, 400, n)
sq_footage = np.clip(sq_footage, 800, 3000)

# Transit score (0-100)
transit_score = np.random.normal(65, 15, n)
transit_score = np.clip(transit_score, 20, 100)

# Green space proximity (binary)
green_space = np.random.binomial(1, 0.4, n)

# House price model
base_price = 200000
footage_effect = 100  # $ per sq foot
transit_effect = 1000  # $ per transit score point
green_effect = 50000  # $ premium for green space proximity

# Calculate price with some noise
price = (base_price + 
         footage_effect * sq_footage + 
         transit_effect * transit_score / 10 + 
         green_effect * green_space + 
         np.random.normal(0, 25000, n))

# Create dataframe
housing = pd.DataFrame({
    'price': price,
    'sq_footage': sq_footage,
    'transit_score': transit_score,
    'green_space': green_space,
    'green_space_str': ['Near Park' if g == 1 else 'No Park Nearby' for g in green_space]
})

# Create just the 2nd and 3rd subplots
fig, (ax2, ax3) = plt.subplots(1, 2, figsize=(12, 4))

# Second plot: Price vs. square footage by green space
sns.scatterplot(x='sq_footage', y='price', hue='green_space_str', 
                data=housing, alpha=0.6, ax=ax2, palette=['#1f77b4', '#2ca02c'])

# Add regression lines
for g, color, label in zip([0, 1], ['#1f77b4', '#2ca02c'], ['No Park Nearby', 'Near Park']):
    subset = housing[housing['green_space'] == g]
    # Simple linear fit
    x = np.array([800, 3000])
    model = np.polyfit(subset['sq_footage'], subset['price'], 1)
    y = np.polyval(model, x)
    ax2.plot(x, y, color=color, linewidth=2.5)

# Format plot
ax2.set_xlabel('Square Footage', fontsize=12)
ax2.set_ylabel('Price ($)', fontsize=12)
ax2.set_title('Price vs. Size by Green Space Proximity', fontsize=14)
ax2.ticklabel_format(style='plain', axis='y')
ax2.grid(False)
ax2.legend(title="Green Space")

# Third plot: Price vs. transit score by green space
sns.scatterplot(x='transit_score', y='price', hue='green_space_str', 
                data=housing, alpha=0.6, ax=ax3, palette=['#1f77b4', '#2ca02c'])

# Add regression lines
for g, color, label in zip([0, 1], ['#1f77b4', '#2ca02c'], ['No Park Nearby', 'Near Park']):
    subset = housing[housing['green_space'] == g]
    # Simple linear fit
    x = np.array([20, 100])
    model = np.polyfit(subset['transit_score'], subset['price'], 1)
    y = np.polyval(model, x)
    ax3.plot(x, y, color=color, linewidth=2.5)

# Format plot
ax3.set_xlabel('Transit Score', fontsize=12)
ax3.set_ylabel('Price ($)', fontsize=12)
ax3.set_title('Price vs. Transit Score by Green Space Proximity', fontsize=14)
ax3.ticklabel_format(style='plain', axis='y')
ax3.grid(False)
ax3.legend(title="Green Space")

sns.despine()
plt.tight_layout()
plt.show()
```

**Model 5:** Multiple Regression with Categorical and Continuous Predictors

$$\text{price} = \beta_0 + \beta_1 \text{sq_ft} + \beta_2 \text{transit_score} + \beta_3 \text{green_space} + \epsilon$$
---

## Example 5: Housing Prices and Transit
<p class="subheader">How does transit access and green space affect housing prices?</p>

**Model 5:** Multiple Regression with Categorical and Continuous Predictors

$$\text{price} = \beta_0 + \beta_1 \text{sq_ft} + \beta_2 \text{transit_score} + \beta_3 \text{green_space} + \epsilon$$

. . .

```python
# Normalize square footage for easier interpretation
housing['sq_footage_100s'] = housing['sq_footage'] / 100
housing['transit_score_10s'] = housing['transit_score'] / 10

# Run multiple regression model
model = smf.ols('price ~ sq_footage_100s + transit_score_10s + green_space', 
                data=housing).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- β₁: Price increase for each additional 100 square feet
- β₂: Price increase for each 10-point improvement in transit score
- β₃: Price premium for homes near green spaces

---

## Example 6: Seasonal Effects on Retail Sales
<p class="subheader">How do seasonal patterns impact retail sales?</p>

**Research Question:**
*How do retail sales vary by season when accounting for overall trends?*

. . .

**The Data:**

- Monthly retail sales data over 5 years (n = 60 months)
- Variables: Sales (in thousands), time trend, seasonal indicators

---

## Example 6: Seasonal Effects on Retail Sales
<p class="subheader">How do seasonal patterns impact retail sales?</p>

**Visualization:** line graph, timeseries, bar graph by season

```{python}
#| echo: false
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import statsmodels.api as sm
from matplotlib.gridspec import GridSpec

# Set seed for reproducibility
np.random.seed(42)

# Generate monthly data for 5 years (60 months)
n_months = 60
time = np.arange(n_months)
months = np.array([(t % 12) + 1 for t in time])
years = np.array([2020 + t // 12 for t in time])
quarters = np.array([(m-1) // 3 + 1 for m in months])

# Create time components
trend = 0.5 * time  # Upward trend
seasonal = np.zeros(n_months)

# Seasonal pattern (Q4 holiday spike, Q1 post-holiday drop, etc.)
seasonal_pattern = {
    1: -8,  # Q1: Post-holiday slump
    2: 2,   # Q2: Spring growth
    3: 5,   # Q3: Summer boost
    4: 15   # Q4: Holiday spike
}

for i, q in enumerate(quarters):
    seasonal[i] = seasonal_pattern[q]

# Add cyclical component and noise
cycle = 8 * np.sin(2 * np.pi * time / 24)  # 2-year business cycle
noise = np.random.normal(0, 3, n_months)

# Generate sales data
base_sales = 100
sales = base_sales + trend + seasonal + cycle + noise

# Create dataframe
retail_data = pd.DataFrame({
    'date': pd.date_range(start='2020-01-01', periods=n_months, freq='M'),
    'year': years,
    'month': months,
    'quarter': quarters,
    'time': time,
    'sales': sales
})

# Create quarter dummy variables
for q in range(1, 5):
    retail_data[f'Q{q}'] = (retail_data['quarter'] == q).astype(int)

# Create visualization with side-by-side plots
fig = plt.figure(figsize=(12, 4))
gs = GridSpec(1, 3, figure=fig)
ax1 = fig.add_subplot(gs[0, :2])  # Takes up 2/3 (first 2 columns)
ax2 = fig.add_subplot(gs[0, 2])   # Takes up 1/3 (last column)

# First plot: Time series
ax1.plot(retail_data['date'], retail_data['sales'], color='blue', marker='o', 
         linestyle='-', alpha=0.7, markersize=4)

# Add shading for quarters
for year in range(2020, 2025):
    # Q1 (light blue)
    q1_start = pd.Timestamp(f'{year}-01-01')
    q1_end = pd.Timestamp(f'{year}-03-31')
    ax1.axvspan(q1_start, q1_end, color='blue', alpha=0.1)
    
    # Q3 (light green)
    q3_start = pd.Timestamp(f'{year}-07-01')
    q3_end = pd.Timestamp(f'{year}-09-30')
    ax1.axvspan(q3_start, q3_end, color='green', alpha=0.1)
    
    # Q4 (light red)
    q4_start = pd.Timestamp(f'{year}-10-01')
    q4_end = pd.Timestamp(f'{year}-12-31')
    ax1.axvspan(q4_start, q4_end, color='red', alpha=0.1)

ax1.set_xlabel('Date', fontsize=12)
ax1.set_ylabel('Monthly Sales (thousands)', fontsize=12)
ax1.set_title('Retail Sales Over Time with Quarterly Patterns', fontsize=14)


# Second plot: Average sales by quarter
quarterly_avg = retail_data.groupby('quarter')['sales'].mean()
ax2.bar(quarterly_avg.index, quarterly_avg.values, color=['blue', 'orange', 'green', 'red'], alpha=0.7)
ax2.set_xlabel('Quarter', fontsize=12)
ax2.set_ylabel('Average Sales (thousands)', fontsize=12)
ax2.set_title('Average Retail Sales by Quarter', fontsize=14)
ax2.set_xticks([1, 2, 3, 4])
ax2.set_xticklabels(['Q1\n(Winter)', 'Q2\n(Spring)', 'Q3\n(Summer)', 'Q4\n(Holiday)'])

# Add value labels
for i, v in enumerate(quarterly_avg.values):
    ax2.text(i+1, v+2, f'{v:.1f}', ha='center')

# Adjust layouts and spacing
sns.despine()
plt.tight_layout()
plt.show()
```

---

## Example 6: Seasonal Effects on Retail Sales
<p class="subheader">How do seasonal patterns impact retail sales?</p>

**Model 6: Time Series with Seasonal Fixed Effects**

$$\text{sales} = \beta_0 + \beta_1 \text{time} + \beta_2 \text{Q2} + \beta_3 \text{Q3} + \beta_4 \text{Q4} + \epsilon$$

. . .

```python
# Run model with time trend and seasonal dummies
model = smf.ols('sales ~ time + Q2 + Q3 + Q4', data=retail_data).fit()
print(model.summary().tables[1])
```

. . .

**Interpretation:**

- β₁: Underlying monthly trend in sales (growth rate per month)
- β₂, β₃, β₄: Seasonal effects for Q2, Q3, and Q4 relative to Q1 (the reference quarter)
- The model captures both the long-term trend and seasonal patterns

. . .

**Key Insight:** Seasonal fixed effects allow us to quantify and test the significance of seasonal patterns while controlling for the underlying trend

---

## Model Selection Framework
<p class="subheader">Matching research questions to statistical approaches</p>

| Question Type | Model |
|-------|---------|
| Change in single group | $y = \beta_0 + \varepsilon$ (*One-sample t-test*) |
| Differences between groups |  $y = \beta_0 + \beta_1 Group + \varepsilon$ (*Two-sample t-test*) |
| Relationship between vars | $y = \beta_0 + \beta_1 x + \varepsilon$ (*Simple regression*) |
| Multiple factors | $y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \varepsilon$ (*Multiple reg*) |
| Group-specific relationships | $y = \beta_0 + \beta_1 x + \beta_2 Group + \beta_3 x \times Group + \varepsilon$ <br> (*Interactions*) |
| Temporal patterns | $y_t = \beta_0 + \beta_1 t + \beta_2 Season + \varepsilon_t$ <br> (*Time series with fixed effects*) |
| Many more! | (*You can construct your own*) |

---

## Key Takeaways
<p class="subheader">Connecting economic questions to appropriate statistical models</p>

<br>

1. **Start with the research question**
   - The nature of the question guides model selection
   - Consider what parameters would directly answer your question

. . .

2. **Visualize data first**
   - Plots reveal patterns that inform model specification
   - Helps identify potential non-linearities or interactions

---

## Key Takeaways
<p class="subheader">Connecting economic questions to appropriate statistical models</p>

<br>

3. **Match the model to the data structure**
   - Paired observations call for paired tests
   - Categorical predictors often require dummy variables
   - Time series data usually needs detrending or seasonal adjustment

. . .

4. **Interpret coefficients carefully**
   - Connect each coefficient back to your research question
   - Consider both statistical and practical significance
   - Always think about what's being held constant
```

